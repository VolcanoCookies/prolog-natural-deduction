% Check if something is a list.
list([_|_]).

% When appending, if the other element is a list, do list appending.
append([], [L|LS], [L|LS]).
% When appending, of the other element is a singleton, do singleton appending.
append([], L, [L]).
% Append a list and another list, or single element.
append([H|T], L, [H|R]) :-
          append(T, L, R).

% Flatten a matrix into a list.
flatten(List, Res) :- flatten(List, [], Res).
flatten([], ACC, ACC).
flatten([H|T], ACC, RES) :-
    append(ACC, H, NEW),
    flatten(T, NEW, RES).

len(List, Size) :-
    flatten(List, Flattened),
    len(Flattened, 0, Size).
len([], Size, Size).
len([_|T], Index, Size) :-
    Next is Index+1,
    len(T, Next, Size).

% Any list that isnt a proof, is a box.
/**
 * is_box(+Box : list).
 *
 * Succeeds if Box is a box.
 *
 * @param Box the potential box.
 */
is_box(Box) :-
    list(Box),
    not(is_proof(Box)).
% Any list of length 3 with the first element being a integer is a proof.
is_proof([Line|[_|[_|[]]]]) :-
    integer(Line).

% End condition is the first item in a list being a proof.
first_proof([Proof|_], Proof) :-
    is_proof(Proof).
% First item is not a proof, so we enter the box at the first position.
first_proof([Box|_], Proof) :-
    is_box(Box),
    first_proof(Box, Proof).

% End condition is the last item being a proof.
last_proof([Proof|[]], Proof) :-
    is_proof(Proof).
% Last item is a box so the last proof is in this box.
last_proof([Box|[]], Proof) :-
    is_box(Box),
    last_proof(Box, Proof).
% We are not at the last item, so we go through the list.
last_proof([_|T], Proof) :-
    last_proof(T, Proof).

natural_order([_|[]]).
natural_order([H|[N|_]]) :-
    number(H),
    number(N),
    H>N,
    natural_order([N|T]).

% Check if an element exists in a list.
contains([H|T], H).
contains([H|T], E) :-
        contains(T, E).

% Check if an element exists in a list or any nested list.
deep_contains([H|T], H).
deep_contains([H|T], E) :-
        deep_contains(H, E) ;
        deep_contains(T, E).

% Get an element by index from a list, can also check if a element exists at an index.
get(List, Index, Elem) :-
        get(List, Index, 1, Elem).
get([H|_], Goal, Goal, H).
get([], _, _, []).
get([H|T], Goal, Curr, Elem) :-
        Next is Curr+1,
        get(T, Goal, Next, Elem).

last([H|[]], H).
last([H|T], E) :-
        last(T, E).
